///////////////////////////////////////////////////////////////////////////////

Commands["convert"] =
{
	Func = function( _params )
	{
		ExecScript( "filename.gm" );
	},

	Help =
	{
		"Convert, this command is for developers only",
		"Usage: /bot convert",
	},
};

///////////////////////////////////////////////////////////////////////////////

Commands["testsuicide"] =
{
	Func = function( _params )
	{
		foreach( bot in BotTable )
		{
			bot.Suicide( _params[0], _params[1] );
		}
	},

	Help =
	{
		"Set Suicide, sets botSuicide session variable to given param",
		"Bots will /kill 2 seconds before next spawn",
	},
};

///////////////////////////////////////////////////////////////////////////////

Commands["strafejump"] =
{
	Func = function( _params )
	{
		if (typeId(_params[0]) != 0) {
			enabled = ToInt(_params[0]);
			ConfigSet("Navigation","StrafeJump", enabled);

			foreach(bot in BotTable) {
				if (!bot.ProfileStrafeJump) {
					bot.StrafeJump = enabled;
				}
			}

			print("bot strafe jumping set to " + enabled);
		}
	},

	Help =
	{
		"Enable or Disable bots usage of strafe jump waypoint flags"
	},
};

///////////////////////////////////////////////////////////////////////////////

Commands["tracearty"] =
{
	Func = function( _params )
	{
		RTCWUtil.TraceArty( _params[ 0 ] );
	},

	Help =
	{
		"Runs a trace to find arty targets from closest arty goal",
	},
};

///////////////////////////////////////////////////////////////////////////////

Commands["checkbots"] =
{
	Func = function( _params )
	{
		foreach( bot in BotTable )
		{
			print( bot.Name, bot.GetTeam(), bot.GetClass() );
		}
	},
};

///////////////////////////////////////////////////////////////////////////////
// /bot say <partial name> <string1> <string2> ...
Commands["say"] =
{
	Func = function( _params )
	{
		n = "";
		// find the bot
		foreach( bot in BotTable )
		{
			n = bot.Name;
			if ( n.Find( _params[0] ) != -1 ) {
				foundMatch = true;
				break;
			}
		}

		if ( foundMatch ) {
			// build the string with remaining params
			length = tableCount( _params );
			s = "";
			for ( i = 1; i < length; i += 1 ) {
				s += ( _params[i] + " " );
			}
			b = Util.GetBotByName( n );
			b.Say( s.TrimRight() );
		}
	},
};

///////////////////////////////////////////////////////////////////////////////

Commands["ignore"] =
{
	Func = function( _params )
	{
		if ( typeName(_params[0]) == "float" && _params[1] )
		{
			entId = ToInt(_params[0]);
			time = ToFloat(_params[1]);
			foreach ( bot in BotTable )
			{
				bot.IgnoreTarget(entId, time);
			}
		}
	},

	Help =
	{
		"Ignore given entity for given time for debug purposes",
	},
};

///////////////////////////////////////////////////////////////////////////////
// test command
Commands["imoutside"] =
{
	Func = function( _params )
	{
		outside = EntityIsOutside(0);
		msg = "you are inside";
		if (outside) {
			msg = "you are outside";
		}
		
		EchoToScreen(10, msg);
	},

	Help =
	{
		"test EntityIsOutside function",
	},
};

///////////////////////////////////////////////////////////////////////////////
// dump goal definitions from a passed map table
// /bot goaldef <table> <goal type>
Commands["goaldef"] =
{
	Func = function( _params )
	{
		goals = table();

		if ( Map[ _params[0] ] )
		{
			switch(_params[1])
			{
				case "defend":
				{
					foreach ( id and wpName in Map[ _params[ 0 ] ] ) {
						wpTable = table();
						wpInfo = Wp.GetWaypointByName( wpName, wpTable );

						if ( tableCount(wpTable) > 0 ) {
							goals[ id ] = table();
							goals[ id ].GoalType = "CAMP";
							goals[ id ].Name = format("CAMP_%s", wpName);
							goals[ id ].TagName = wpName;
							goals[ id ].Radius = wpTable.radius;
							goals[ id ].MinRadius = wpTable.radius;
							goals[ id ].Stance = "crouch";
							goals[ id ].AimVectors = table();
							goals[ id ].AimVectors[ 0 ] = wpTable.facing;
							goals[ id ].Roles = table();
							goals[ id ].Roles[ 0 ] = "DEFENDER";
							goals[ id ].Position = GroundPoint(wpTable.position);
							goals[ id ].Weapons = table();
						}
						else {
							print(format("Cannot find waypoint %s, aborting", wpName));
							return;
						}
					}
				}
				case "as":
				{
					foreach ( id and wpName in Map[ _params[ 0 ] ] ) {
						wpTable = table();
						wpInfo = Wp.GetWaypointByName( wpName, wpTable );

						if ( tableCount(wpTable) > 0 ) {
							goals[ id ] = table();
							goals[ id ].GoalType = "AIRSTRIKE";
							goals[ id ].Name = format("AIRSTRIKE_%s", wpName);
							goals[ id ].TagName = wpName;
							goals[ id ].Radius = wpTable.radius;
							goals[ id ].MinRadius = wpTable.radius;
							goals[ id ].Stance = "stand";
							goals[ id ].AimVectors = table();
							goals[ id ].AimVectors[ 0 ] = wpTable.facing;
							goals[ id ].Position = GroundPoint(wpTable.position);
						}
						else {
							print(format("Cannot find waypoint %s, aborting", wpName));
							return;
						}
					}
				}
				case "grenade":
				{
					if ( !Map.Target ) {
						print( "expecting Map.Target table for grenade goal type" );
						return;
					}

					foreach( id and def in Map.Target ) {
						goals[ id ] = table();
						goals[ id ].GoalType = "GRENADE";
						goals[ id ].IgnoreDead = 0;
						goals[ id ].Name = format("GRENADE_%s", id);
						goals[ id ].TargetGoal = def.GrenadeTargetGoalName;
						goals[ id ].Radius = 32;
						goals[ id ].MinRadius = 32;
						goals[ id ].Stance = "stand";
						goals[ id ].TagName = id;

						if ( def.PrimeGrenade ) {
							goals[ id ].PrimeGrenade = def.PrimeGrenade;
						} else {
							goals[ id ].PrimeGrenade = 1;
						}

						goals[ id ].Position = GroundPoint(GetEntityWorldSpace( GetGoal(goals[ id ].TargetGoal).GetEntity(), def.Offset[ 0 ] ));
						goals[ id ].Facing = (GetGoal(def.GrenadeTargetGoalName).GetPosition() - goals[ id ].Position).Normalize();
					}
				}
				default:
				{
					print( "invalid goal type for param 1. expecting \"defend\", \"as\" or \"grenade\"" );
				}
			}

			Commands["goaldef"].writeGoalDefs(goals, _params[0]);
		}
		else
		{
			print( format("map table %s does not exist", _params[ 0 ]) );
		}
	},

	writeGoalDefs = function(goals, type)
	{
		print("writing goal defs");

		gmfile = File();
		fileName = format("%s_%s_converted.gm", GetMapName(), type);
		assert( gmfile.Open( fileName, "text", false ) );

		foreach( goal in goals ) {
			str = format("\t%s =", goal.Name);
			assert( gmfile.Write( str, System.NewLine ) );
			assert( gmfile.Write( "\t{", System.NewLine ) );

			// add some common props
			goal.CreateOnLoad = 1;
			goal.GroupName = "";
			goal.Orientation = Vector3(0,0,0);
			goal.TeamAvailability = 0;
			goal.Version = 1;

			foreach ( property and value in goal ) {

				switch(typeName(value))
				{
					case "int":
					{
						str = format("\t\t%s = %d,", property, value);
						assert( gmfile.Write( str, System.NewLine ) );
					}
					case "float":
					{
						str = format("\t\t%s = %f,", property, value);
						assert( gmfile.Write( str, System.NewLine ) );
					}
					case "string":
					{
						str = format("\t\t%s = \"%s\",", property, value);
						assert( gmfile.Write( str, System.NewLine ) );
					}
					case "vector3":
					{
						str = format("\t\t%s = Vec3(%f,%f,%f),", property, value.x, value.y, value.z);
						assert( gmfile.Write( str, System.NewLine ) );
					}
					case "table":
					{
						str = format("\t\t%s = ", property);
						assert( gmfile.Write( str, System.NewLine ) );
						assert( gmfile.Write( "\t\t{", System.NewLine ) );

						foreach( xid and val in value ) {

							switch(typeName(val))
							{
								case "vector3":
								{
									str = format("\t\t\t[%d] = Vec3(%f,%f,%f),", xid, val.x, val.y, val.z);
									assert( gmfile.Write( str, System.NewLine ) );
								}
								case "string":
								{
									str = format("\t\t\t[%d] = \"%s\",", xid, val);
									assert( gmfile.Write( str, System.NewLine ) );
								}
							};
						}

						assert( gmfile.Write( "\t\t},", System.NewLine ) );
					}
				};
			}

			assert( gmfile.Write( "\t},", System.NewLine ) );
		}

		gmfile.Close();

		print("finished writing goal defs");
	},
};

////////////////////////////////////////////////////////////////////

Commands["difficulty"] =
{
	Func = function( _params )
	{
		if(typeId(_params[0]) != 0)
		{
			ConfigSet("Difficulty","CurrentDifficulty", Clamp( ToInt(_params[0], 4), -1, 7 ) );
		}

		print("Difficulty:", ConfigGet("Difficulty","CurrentDifficulty", 4));
	},

	Help =
	{
		"Sets the bots difficulty (-1...7), -1 is random, default 4",
	},
};

////////////////////////////////////////////////////////////////////
