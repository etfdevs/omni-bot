// This script contains useful utility scripts for performing common actions.

// Set up some core utility module with game specific stuff.
Util.PlayerClassTable =
{
	CLASS.SOLDIER,
	CLASS.ENGINEER,
	CLASS.MEDIC,
	CLASS.LIEUTENANT,
};

// offset for converted waypoint goals
Util.WaypointGoalOffset = Vector3(0,0,-24);

Util.AllTeams = ( 1 << TEAM.AXIS ) | ( 1 << TEAM.ALLIES );

// debug string color
Util.DebugColorString = "^5";

Util.SniperClass = CLASS.SOLDIER;
Util.SniperWeapons =
{
	WEAPON.MAUSER,
};

Util.TeamSniperWeapons =
{
	AXIS =
	{
		WEAPON.MAUSER,
	},

	ALLIES =
	{
		WEAPON.MAUSER,
	},
};


///////////////////////////////////////////////////////////////////////////////
// these values are for makegm.gm

Util.FlagCarrier = "CLASS.ENGINEER";
Util.Sniper = "CLASS.SOLDIER";

Util.HaveTeam = { false, true, true, false, false };

Util.TeamNames =
{
	{ "", "", "" },
	{ "AXIS", "Axis", "axis" },
	{ "ALLIES", "Allies", "allies" },
};

///////////////////////////////////////////////////////////////////////////////
// these values are for testmap.gm

Util.NoTimeLimit = "timelimit 0";
Util.TimeLimit1 = "timelimit 1";

Util.BotNames =
{
	{
		"", "", "", "",
		"",
	},
	{
		"", "axis_soldier", "axis_medic", "axis_engineer",
		"axis_lieutenant",
	},
	{
		"", "allies_soldier", "allies_medic", "allies_engineer",
		"allies_lieutenant",
	},
};


///////////////////////////////////////////////////////////////////////////////
//
member AddBotTester = function( team, class, name )
{
	// Add Tester bot
	sleep( 1 );
	AddBot( team, class, name );
	sleep( 1 );

	bot = Util.GetBotByName( name );
	ent = bot.GetGameEntity();

	while ( !Util.GetEntHealth(ent) )
	{
		sleep( 1 );
	}

	return bot;
};

///////////////////////////////////////////////////////////////////////////////
//
member ClearMainGoals = function()
{
	Util.DisableGoal({
		"PLANT.*",
		"MOUNTMG42.*",
		"MOVER.*",
		"CHECKPOINT.*",
		"FLAG.*"
	});
};

///////////////////////////////////////////////////////////////////////////////
//
member ClearSecondaryGoals = function()
{
	Util.DisableGoal({
		"REPAIR.*",
		".*ARTILLERY.*"
	});
};

///////////////////////////////////////////////////////////////////////////////
//
member CountClass = function( team, class )
{
	count = 0;
	foreach( bot in BotTable )
	{
		if ( bot.GetTeam() == team && bot.GetClass() == class ) {
			count += 1;
		}
	}

	return count;
};

///////////////////////////////////////////////////////////////////////////////
//
member ChangeClass = function( team, originalclass, newclass, revert, maxbots )
{
	numbots = 0;

	foreach( bot in BotTable )
	{
		if ( !GetEntFlags( bot.GetGameEntity(), ENTFLAG.CARRYINGGOAL )
			 && bot.GetTeam() == team  ) {
			if ( bot.PrimaryClass == null ) {
				bot.PrimaryClass = bot.GetClass();
			}

			if ( bot.PrimaryClass == originalclass && !revert && !bot.ClassChanged ) {
				if ( numbots < maxbots ) {
					numbots += 1;
					bot.ClassChanged = true;
					bot.ChangeClass( newclass );
				}
			}

			if ( bot.ClassChanged && revert && bot.PrimaryClass == originalclass
				 && bot.GetClass() == newclass ) {
				bot.ClassChanged = false;
				bot.ChangeClass( bot.PrimaryClass );
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member NoSnipeWeapons =
{
	WEAPON.PANZERFAUST,
	WEAPON.VENOM,
	WEAPON.FLAMETHROWER,
};

member NoSnipe = function( bot )
{
	if ( bot.GetClass() != CLASS.SOLDIER ) {
		return;
	}

	if ( bot.HasWeapon( WEAPON.MAUSER ) ) {
		bot.ChangePrimaryWeapon( Util.GetRandomTableValue(this.NoSnipeWeapons) );
	}
};

member StopSniping = function( team )
{
	foreach( bot in BotTable )
	{
		if ( team && bot.GetTeam() != team ) {
			continue;
		}

		this.NoSnipe( bot );
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SetPrimaryGoals = function( priority )
{
	oldDebug = Map.Debug;
	oldScripts = DEBUG_MAP_SCRIPTS;
	Map.Debug = 0;
	global DEBUG_MAP_SCRIPTS = false;
	SetGoalPriority( "CAPPOINT_.*", priority );
	SetGoalPriority( "PLANT_.*", priority - 0.08f );
	SetGoalPriority( "CHECKPOINT_.*", priority - 0.1f );
	SetGoalPriority( "FLAG_.*", priority - 0.15f, 0, 0, true );
	SetGoalPriority( "FLAGRETURN_.*", 1.0, 0, 0, true  );
	Map.Debug = oldDebug;
	global DEBUG_MAP_SCRIPTS = oldScripts;
};

///////////////////////////////////////////////////////////////////////////////
//
member RandomSpawn = function( team, spawn )
{
	foreach( bot in BotTable )
	{
		if ( !bot.ChangedSpawn && bot.GetTeam() == team ) {
			if ( RandInt( 0,9 ) < 5 ) {
				bot.ChangeSpawnPoint( spawn );
				bot.ChangedSpawn = true;
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member RandomBotSpawn = function( bot, team, spawn )
{
	Util.RandomBotSpawn(bot, team, spawn);
};

///////////////////////////////////////////////////////////////////////////////
//
member ChangeSpawn = function( team, spawn, numbots )
{
	c = 0;
	foreach( bot in BotTable )
	{
		if ( bot.GetTeam() == team ) {
			bot.ChangeSpawnPoint( spawn );
			bot.ChangedSpawn = true;

			c += 1;
			if ( numbots && c >= numbots ) {
				return;
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member ChangeSpawnNoDefenders = function( team, spawn, numbots )
{
	c = 0;
	foreach( bot in BotTable )
	{
		if ( bot.HasRole(ROLE.DEFENDER) ) {
			continue;
		}

		if ( bot.GetTeam() == team ) {
			bot.ChangeSpawnPoint( spawn );
			bot.ChangedSpawn = true;

			c += 1;
			if ( numbots && c >= numbots ) {
				return;
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SelectWeapon = function( bot, w, isFog )
{
	class = bot.GetClass();

	if ( class == CLASS.SOLDIER ) {
		if ( w == WEAPON.PANZERFAUST ||
			 w == WEAPON.MAUSER ||
			 w == WEAPON.VENOM ||
			 w == WEAPON.FLAMETHROWER ) {
			bot.ChangePrimaryWeapon( w );
			if ( w == WEAPON.MAUSER && !isFog ) {
				if ( bot.MaxViewDistance < 5000 ) {
					bot.MaxViewDistance = bot.MaxViewDistance * 2;
				} else
				{ bot.MaxViewDistance = 10000; }
			}
		}
	} else if ( class == CLASS.LIEUTENANT )   {
		if ( w == WEAPON.MP40 ||
			 w == WEAPON.THOMPSON ||
			 w == WEAPON.STEN ) {
			bot.ChangePrimaryWeapon( w );
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SelectSoldierWeapons = function( team, bot, weap1, weap2, weap3 )
{
	if ( bot.GetClass() != CLASS.SOLDIER || ( team != 0 && bot.GetTeam() != team ) ) {
		return;
	}

	wt = table();

	if ( weap1 ) {
		Util.AddToTable( wt, weap1 );
	}
	if ( weap2 ) {
		Util.AddToTable( wt, weap2 );
	}
	if ( weap3 ) {
		Util.AddToTable( wt, weap3 );
	}

	weap = Util.GetRandomTableValue(wt);

	// no weap request if they already have
	if ( !bot.HasWeapon( weap ) ) {
		bot.ChangePrimaryWeapon( weap );
	}
};

member SwitchSoldierWeapons = function( team, weap1, weap2, weap3 )
{
	foreach( bot in BotTable )
	{
		RTCWUtil.SelectSoldierWeapons( team, bot, weap1, weap2, weap3 );
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SwitchWeapon = function( w )
{
	foreach( bot in BotTable )
	{
		RTCWUtil.SelectWeapon( bot, w );
	}
};

///////////////////////////////////////////////////////////////////////////////
// s = bool suicide, p = bool persistent ( keep it set even after spawn )
member SetSuicide = function( team, class, s, p )
{
	foreach( bot in BotTable )
	{
		if ( bot.GetTeam() == team && bot.GetClass() == class ) {
			bot.Suicide( s, p );
		}
	}
};

member SetTeamSuicide = function( team, s, p )
{
	foreach( bot in BotTable )
	{
		if ( bot.GetTeam() == team ) {
			bot.Suicide( s, p );
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member BotDisableCombatCrouch = function( bot, crouch )
{
	bot.DontCombatCrouch = crouch;
};

member TeamDisableCombatCrouch = function( team, crouch )
{
	foreach( bot in BotTable )
	{
		if ( bot.GetTeam() == team ) {
			bot.DontCombatCrouch = crouch;
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member IsPlantGoalAvailable = function()
{
	foreach( goal in Util.GoalTable("PLANT_.*") )
	{
		if ( goal.IsAvailable( TEAM.AXIS ) || goal.IsAvailable( TEAM.ALLIES ) ) {
			return true;
		}
	}

	// no plant goals available
	return false;
};

///////////////////////////////////////////////////////////////////////////////
//
member IsTeamDead = function( team, minbots, class )
{
	numalive = 0;
	// loop through the reserved player ents since there is no team table stored
	for ( i = 0; i < 64; i = i + 1 )
	{
		if ( EntityIsValid(i) && GetEntTeam( i ) == team && !GetEntFlags( i, ENTFLAG.DEAD, ENTFLAG.LIMBO )
			 && (!class || GetEntClass(i)==class) ) {
			numalive += 1;
			if ( !minbots ) {
				return false;
			}
		}
	}

	if ( ( minbots && numalive < minbots ) || numalive == 0 ) {
		return true;
	} else
	{
		return false;
	}
};

member IsTeamClassDead = function( team, class )
{
	return this.IsTeamDead(team, 0, class);
};

///////////////////////////////////////////////////////////////////////////////
//
member TraceArty = function( usePlayer )
{
	radius = 200;
	playerEnt = GetLocalEntity();
	playerPos = GetEntPosition(playerEnt);
	foundGoal = null;
	sourceOffset = Vector3(0,0,60); // 60 is what the CALLARTILLERY goal uses
	targetOffset = Vector3(0,0,20);

	if ( !usePlayer )
	{
		dist = radius;
		foreach ( mapgoal in Util.GoalTable("CALLART.*") )
		{
			evalDist = DistanceBetween(mapgoal, playerPos);
			if ( evalDist < dist )
			{
				dist = evalDist;
				foundGoal = mapgoal;
			}
		}
	}

	if (foundGoal || usePlayer)
	{
		if ( !usePlayer )
		{
			print("RTCWUtil.TraceArty: Selected", foundGoal.GetName());
			sourcePos = foundGoal.GetPosition();
		}
		else
		{
			print("RTCWUtil.TraceArty: Tracing from", GetEntName(playerEnt), "^2");
			sourcePos = playerPos - Vector3(0,0,24);
		}

		targets = Util.GoalTable("ARTILLERY.*");
		if ( tableCount(targets) > 0 )
		{
			foreach ( targetgoal in targets )
			{
				targetPos = targetgoal.GetPosition() + targetOffset;
				targetName = targetgoal.GetName();

				tr = TraceLine(sourcePos + sourceOffset, targetPos, null, TRACE.SHOT, playerEnt, false);
				if ( tr.fraction < 1 )
				{
					print("RTCWUtil.TraceArty: ^1No line of sight to", targetName, "^2");
					DrawDebugLine(sourcePos + sourceOffset, tr.end, COLOR.PINK, 30);
					DrawDebugLine(tr.end, targetPos, COLOR.RED, 30);
				}
				else
				{
					print("RTCWUtil.TraceArty: ^2Has line of sight to", targetName);
					DrawDebugLine(sourcePos + sourceOffset, targetPos, COLOR.GREEN, 30);
				}
			}
		}
		else
		{
			Error("RTCWUtil.TraceArty: No Arty Targets");
		}
	}
	else
	{
		Error("RTCWUtil.TraceArty: No Arty Goal Close Enough");
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member KillEntities = function(ents)
{
	x = 0;
	foreach ( obj in ents ) {
		if ( IsTable(obj) ) {
			for ( i = obj[0]; i <= obj[1]; i += 1 ) {
				EntityKill(i);
				x += 1;
			}
		}
		else {
			EntityKill(obj);
			x += 1;
		}
	}

	Util.MapDebugPrint(format("attempted to remove %d entities", x), true);
};

///////////////////////////////////////////////////////////////////////////////
// thread to toggle goal availability. note that it relies on Map.FlagStatus
member ToggleFlag = function( goal, time )
{
	count = 1;
	while ( 1 )
	{
		count += 1;
		if ( count % time == 0 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, Map.FlagStatus != TEAM.ALLIES, goal );
			SetAvailableMapGoals( TEAM.AXIS, Map.FlagStatus != TEAM.AXIS, goal );

			//ExecCommand(format("show_goals %s", goal));
			count = 1;
		}
		sleep(1);
	}
};

///////////////////////////////////////////////////////////////////////////////
// randomly global chat some victory message
member WinningChat = function( team )
{
	Util.RandomChat(team, { VOICE.G_CHEER, VOICE.G_ENEMY_WEAK, VOICE.G_AFFIRMATIVE, VOICE.G_GOODGAME, VOICE.G_GREATSHOT });
};

// randomly global chat some displeasure about losing
member LosingChat = function( team )
{
	Util.RandomChat(team, { VOICE.G_NEGATIVE, VOICE.G_OOPS, VOICE.G_GOODGAME, VOICE.G_HOLD_FIRE });
};

///////////////////////////////////////////////////////////////////////////////
// alternative to the native function which doesn't rely on line of sight
member GetClosestAlly = function (bot, class, distLimit)
{
	rtn = {};
	rtn.dist = 0;
	botTeam = bot.GetTeam();

	if (distLimit) {
		rtn.dist = distLimit;
	}

	for ( i = 0; i < 64; i += 1 ) {
		ent = GetGameEntityFromId(i);
		if ( ent && GetEntTeam(ent) == botTeam && ent != bot.GetGameEntity() && !GetEntFlags(ent, ENTFLAG.DEAD) ) {
			if ( !class || GetEntClass(i) == class ) {
				dist = bot.DistanceTo(i);
				if ( rtn.dist == 0 || (dist <= rtn.dist && (!distLimit || dist <= distLimit)) ) {
					rtn.dist = dist;
					rtn.ent = ent;
				}
			}
		}
	}

	if (rtn.ent) {
		return rtn;
	}

	return null;
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member DisableGoal = function( goal, routes )
{
	Util.MapDeprecateMessage( "RTCWUtil.DisableGoal", "Util.DisableGoal" );
	Util.DisableGoal(goal, routes);
};

member EnableGoal = function( goal )
{
	Util.MapDeprecateMessage( "RTCWUtil.EnableGoal", "Util.EnableGoal" );
	SetAvailableMapGoals( 0, true, goal );
};

member OneBotSayTeam = function( team, msg )
{
	Util.MapDeprecateMessage( "RTCWUtil.OneBotSayTeam", "Util.BotChat" );
	Util.BotChat(team, "sayteam", msg, 1);
};

member OneBotVSayTeam = function( team, vchat )
{
	Util.MapDeprecateMessage( "RTCWUtil.OneBotVSayTeam", "Util.BotChat" );
	Util.BotChat(team, "vsay", vchat, 1);
};

member CountTeam = function( team )
{
	Util.MapDeprecateMessage( "RTCWUtil.CountTeam", "Server.Team[ teamId ].NumBots" );
	return Server.Team[team].NumBots;
};

member LimitToClass = function( goalname, team, class1, class2, class3, class4 )
{
	Util.MapDeprecateMessage( "RTCWUtil.LimitToClass", "Util.LimitToClass" );
	Util.LimitToClass(goalname, team, class1, class2, class3, class4);
};

member ExcludeClass = function( goalname, team, class1, class2, class3, class4 )
{
	Util.MapDeprecateMessage( "RTCWUtil.ExcludeClass", "Util.ExcludeClass" );
	Util.ExcludeClass(goalname, team, class1, class2, class3, class4);
};
